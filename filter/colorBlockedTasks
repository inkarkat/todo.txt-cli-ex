#!/usr/bin/env bash
###############################################################################
##
# FILE:         colorBlockedTasks
# PRODUCT:      todo.txt-cli-ex
# AUTHOR:       Ingo Karkat <ingo@karkat.de>
# DATE CREATED: 01-Feb-2012
#
###############################################################################
# CONTENTS:
#
# REMARKS:
#
# COPYRIGHT: (C) 2010-2016 Ingo Karkat
#   This program is free software; you can redistribute it and/or modify it
#   under the terms of the GNU General Public License.
#   See http://www.gnu.org/copyleft/gpl.txt
#
# @(#)colorBlockedTasks	$Id$	todo.txt-cli-ex
###############################################################################

if [ $TODOTXT_PLAIN -eq 0 ]; then
    # Note: Highlightings that set the background color (\\033[4...) must have
    # $DEFAULT prepended to reset any foreground highlighting from a predecessor
    # element when it is used to continue the line highlighting.

    if [ ${TERM_COLORS:-0} -ge 256 ]; then
        # Color for tasks that are blocked.
        export COLOR_BLOCKED=${COLOR_BLOCKED-'\\033[0;38;5;136m'}
        # Color for the wait reason itself (but not for dependent NR task
        # numbers). Usually used on top of COLOR_BLOCKED, but can appear
        # independently when the task is already highlighted otherwise.
        export COLOR_BLOCKER=${COLOR_BLOCKER-'\\033[7;38;5;136m'}
    else
        export COLOR_BLOCKED=${COLOR_BLOCKED-'\\033[0;33m'}
        export COLOR_BLOCKER=${COLOR_BLOCKER-'\\033[7;33m'}
    fi

    awk -v date=$1 '
function hasHighlight(colorVar) {
    return (ENVIRON[colorVar] != "")
}
function highlight(colorVar,      color) {
    color = ENVIRON[colorVar]
    gsub(/\\+033/, "\033", color)
    return color
}
function highlightend(colorVar, defaultColor,      color) {
    color = highlight(colorVar "_END")
    return (color == "" ? (defaultColor == "" ? highlight("DEFAULT") : defaultColor) : color)
}
function getLineColor(      hl) {
    if (match($0, /[0-9]+ /) > 1) {
        return substr($0, 1, RSTART - 1)
    } else {
        return ""
    }
}
function highlightBlocker(      i) {
    if (hasHighlight("COLOR_BLOCKER")) {
        for (i = 1; i <= NF; i++) {
            # Do not highlight the (incomplete) w:(wait reason) marker yet; it
            # is done afterwards in a global substitution over the entire line.
            # Do not highlight w:42 dependencies to another tasks, as we rather
            # want the colorSymbols filter to perform number normalization and
            # its highlighting of task numbers. (Assuming it comes after us in
            # the filter pipeline.)
            if ($i !~ /^w:[0-9]+$/ && $i !~ /^w:\([^)]+/) {
                $i = gensub(/(w:)([^( ][^ ]*)/, "\\1" highlight("COLOR_BLOCKER") "\\2" highlightend("COLOR_BLOCKER", lineColor), 1, $i)
            }
        }
        # Remove the brackets in the w:(wait reason) marker; the highlighting
        # provides enough visual grouping.
        $0 = gensub(/ (w:)\(([^)]+)\)/, " \\1" highlight("COLOR_BLOCKER") "\\2" highlightend("COLOR_BLOCKER", lineColor), "g")
    }
}
# Existing line highlightings (i.e. prioritized, done or due tasks) have
# precedence.
{
    lineColor = getLineColor()
    netTask = substr($0, length(lineColor) + 1)
    if (match(netTask, /^[0-9]+ [xX] /)) {
        # Do not process done or trashed tasks.
        print
        next
    }
}
# Highlight blocked tasks with a w: wait marker.
/ w:[^ ]/ {
    if (hasHighlight("COLOR_BLOCKED")) {
        if (lineColor == "") {
            # No existing line color, apply to entire line.
            lineColor = highlight("COLOR_BLOCKED")

            highlightBlocker()
            $0 = highlight("COLOR_BLOCKED") $0 highlightend("COLOR_BLOCKED", "")
        } else {
            # The line is already colored, only highlight the blocker itself.
            highlightBlocker()
        }
    } else {
        highlightBlocker()
    }
}
{ print }
'
else
    cat
fi
