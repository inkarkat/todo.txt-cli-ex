!/bin/bash
###############################################################################
##
# FILE:         futureTasks
# PRODUCT:      todo.txt-cli-ex
# AUTHOR:       Ingo Karkat <ingo@karkat.de>
# DATE CREATED: 04-Jun-2010
#
###############################################################################
# CONTENTS:
#
# REMARKS:
#
# COPYRIGHT: (C) 2010-2016 Ingo Karkat
#   This program is free software; you can redistribute it and/or modify it
#   under the terms of the GNU General Public License.
#   See http://www.gnu.org/copyleft/gpl.txt
#
# SOURCE: Inspired by the Python implementation by FND
#   https://github.com/FND/todo.txt-cli/blob/extensions/futureTasks
#
###############################################################################

export TODOTXT_FILTER_FUTURE_TASKS=${TODOTXT_FILTER_FUTURE_TASKS:-1}
#   1: Suppress tasks that are scheduled in the future.
#  -1: Suppress tasks that have already been scheduled.
#   0: Disable the futureTasks filter.

if [ $TODOTXT_FILTER_FUTURE_TASKS -ne 0 ]; then
    "${GNU_PREFIX}awk" -v date=$1 -v date_cmd="${GNU_PREFIX}date" '

function highlight(colorVar,      color) {
    color = ENVIRON[colorVar]
    gsub(/\\+033/, "\033", color)
    return color
}
function getThreshold(date) {
    if (date == "") {
        return mktime(strftime("%Y %m %d 00 00 00", systime()))
    } else {
        return mktime(gensub(/([0-9]{4})-([0-9]{2})-([0-9]{2})/, "\\1 \\2 \\3 00 00 00", 1, date))
    }
}
BEGIN {
    threshold = getThreshold(date)
}
/[0-9]+ x / {
    netTask = substr($0, length(highlight("COLOR_DONE")) + 1)
    if (match(netTask, /^[0-9]+ x /)) {
        # Do not process done tasks.
        print
        next
    }
}
/ t:[0-9]{4}-[0-9]{2}-[0-9]{2}/ {
    date = mktime(gensub(/^.* t:([0-9]{4})-([0-9]{2})-([0-9]{2})([^0-9].*)?$/, "\\1 \\2 \\3 00 00 00", 1))
    if (ENVIRON["TODOTXT_FILTER_FUTURE_TASKS"] > 0 && date > threshold) {
        # Suppress tasks that are scheduled in the future.
        next
    } else if (ENVIRON["TODOTXT_FILTER_FUTURE_TASKS"] < 0 && date <= threshold) {
        # Suppress tasks that have already been scheduled.
        next
    }
}
{ print }
'
else
    cat
fi
