#!/bin/bash
###############################################################################
##
# FILE:         relativeDates
# PRODUCT:      todo.txt-cli-ex
# AUTHOR:       Ingo Karkat <ingo@karkat.de>
# DATE CREATED: 28-Nov-2011
#
###############################################################################
# CONTENTS:
#   A todo.txt-cli filter that translates dates in the format YYYY-MM-DD to a
#   human-readable date in relation to today, or the passed date.
#
#   Translation is done for any date found within a task, especially the "add
#   date" (cp. todo.sh -t). It's done only when dates are close to the current
#   date and therefore would be better expressed in relation to today.
#   The common combination of "done + add date" is translated into a
#   (potentially relative) date and timespan, e.g. "today, after 3 days".
#   This combination and any translated dates that consist of multiple words are
#   wrapped in parentheses, for easier visual parsing.
#
# CONFIGURATION:
#   TODOTXT_RELDATE
#       To disable the filter (e.g. in add-ons), set this variable to 0.
#
#   TODOTXT_RELDATE_DAYRANGE
#       Range of days (around today) that gets translated into relative dates.
#       Default is 14.
#
# REMARKS:
#
# COPYRIGHT: (C) 2010-2016 Ingo Karkat
#   This program is free software; you can redistribute it and/or modify it
#   under the terms of the GNU General Public License.
#   See http://www.gnu.org/copyleft/gpl.txt
#
# @(#)relativeDates	$Id$	todo.txt-cli-ex
###############################################################################

if [ ${TODOTXT_RELDATE:-1} -ne 0 ]; then
"${GNU_PREFIX}awk" -v date=$1 -v date_cmd="${GNU_PREFIX}date" -v dayRange=${TODOTXT_RELDATE_DAYRANGE:-14} '
 
function highlight(colorVar,      color) {
    color = ENVIRON[colorVar]
    gsub(/\\+033/, "\033", color)
    return color
}
function getThreshold(date) {
    if (date == "") {
        return mktime(strftime("%Y %m %d 00 00 00", systime()))
    } else {
        return mktime(gensub(/([0-9]{4})-([0-9]{2})-([0-9]{2})/, "\\1 \\2 \\3 00 00 00", 1, date))
    }
}
function renderDaySpan(daySpan) {
    if (daySpan == 7) return "one week"
    else if (daySpan == 14) return "two weeks"
    else if (daySpan == 21) return "three weeks"
    else if (daySpan >= 2*365) return int(daySpan / 365) " years"
    else if (daySpan >= 91) return int(daySpan / 30) " months"
    else if (daySpan >= 35) return int(daySpan / 7) " weeks"
    else return daySpan " days"
}
function relativeDate(date,      secondsSpan, daySpan, isInFuture) {
    if (date > threshold) {
        secondsSpan = date - threshold
        isInFuture = 1
    } else {
        secondsSpan = threshold - date
        isInFuture = 0
    }
    daySpan = int(secondsSpan / 86400)

    if (daySpan > dayRange) return ""
    else if (daySpan == 0) return "today"
    else if (daySpan == 1) return (isInFuture ? "tomorrow" : "yesterday")
    else return "(" (isInFuture ? "in " : "") renderDaySpan(daySpan) (isInFuture ? "" : " ago") ")"
}
function afterSpan(daySpan) {
    if (daySpan == 0) return "from same day"
    else if (daySpan == 1) return "from day before"
    else return "after " renderDaySpan(daySpan)
}
BEGIN {
    threshold = getThreshold(date)
}
/[0-9]+ [xX] / {
    netDoneTask = substr($0, length(highlight("COLOR_DONE")) + 1)
    netTrashedTask = substr($0, length(highlight("COLOR_TRASH")) + 1)
    if (match(netDoneTask, /^[0-9]+ x ([0-9]{4}-[0-9]{2}-[0-9]{2} ){2}/) ||
        match (netTrashedTask, /^[0-9]+ X ([0-9]{4}-[0-9]{2}-[0-9]{2} ){2}/)) {
        # Summarize done tasks into (relative?) date + days until done.
        doneDate = mktime(gensub(/^.* [xX] ([0-9]{4})-([0-9]{2})-([0-9]{2}) .*$/, "\\1 \\2 \\3 00 00 00", 1, $0))
        addDate = mktime(gensub(/^.* [xX] [0-9]{4}-[0-9]{2}-[0-9]{2} ([0-9]{4})-([0-9]{2})-([0-9]{2}) .*$/, "\\1 \\2 \\3 00 00 00", 1, $0))

        daySpan = int((doneDate - addDate) / 86400)
        newDoneDate = gensub(/^\((.*)\)$/, "\\1", 1, relativeDate(doneDate))

        newDate = (newDoneDate == "" ? gensub(/^.* [xX] ([0-9]{4}-[0-9]{2}-[0-9]{2}).*$/, "\\1", 1, $0) : newDoneDate) ", " afterSpan(daySpan)
        $0 = gensub(/([0-9]+ [xX] )([0-9]{4}-[0-9]{2}-[0-9]{2} ){2}/, "\\1(" newDate ") ", 1)
    }
}
{
    for (i = 1; i <= NF; i++) {
        # Note: The date may already have been highlighted, so we can only make
        # very few assumptions about the delimiters.
        dateString = gensub(/^(.*[^[:alnum:]])?([[:alpha:]]:)?([0-9]{4})-([0-9]{2})-([0-9]{2})([^[:alnum:]].*)?$/, "\\3 \\4 \\5 00 00 00", 1, $i)
        if (dateString == $i) continue
        newDate = relativeDate(mktime(dateString))
        if (newDate != "")
		$i = gensub(/(([^[:alnum:]])?([[:alpha:]]:))?([0-9]{4})-([0-9]{2})-([0-9]{2})([^[:alnum:]]|$)/, "\\1" "\\4-\\5-\\6 (" newDate ") \\7", 1, $i)
    }
    print
}
'
else
    cat
fi
