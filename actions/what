#!/bin/bash
###############################################################################
##
# FILE:         what
# PRODUCT:      todo.txt-cli-ex
# AUTHOR:       Ingo Karkat <ingo@karkat.de>
# DATE CREATED: 04-Jun-2010
#
###############################################################################
# CONTENTS:
#
# REMARKS:
#
# COPYRIGHT: (C) 2010-2023 Ingo Karkat
#   This program is free software; you can redistribute it and/or modify it
#   under the terms of the GNU General Public License.
#   See http://www.gnu.org/copyleft/gpl.txt
#
# @(#)what	$Id$	todo.txt-cli-ex
###############################################################################

action=$1
shift

[ "$action" = "usage" ] && {
    echo "    $(basename $0) [DATE] [TERM...]"
    echo "      Displays all prioritized and due tasks (based on DATE)."
    echo "      If TERM specified, lists only tasks that contain TERM(s)."
    echo ""
    exit
}

# Configuration to limit the priorities that are considered.
: ${TODOTXT_WHAT_PRIORITIES:=A-Z}

# Fallback command when there are no prioritized or due tasks.
: ${TODOTXT_WHAT_FALLBACK_COMMAND:=lt}

hasNoTasks()
{
    local tasks="${1?}"; shift
    [[ "$tasks" =~ ^--$'\n'TODO:\ 0\ of\ [0-9]+\ tasks\ shown$ ]]
}

export TODOTXT_LSDUE_TASKINCLUSION="-e '^ *[0-9]\+ ([${TODOTXT_WHAT_PRIORITIES}])'"
tasks="$("$TODO_FULL_SH" lsdue "$@")" || exit $?
if hasNoTasks "$tasks"; then
    if [ -n "$TODOTXT_WHAT_FALLBACK_COMMAND" ]; then
        tasks="$("$TODO_FULL_SH" "$TODOTXT_WHAT_FALLBACK_COMMAND" "$@")" || exit $?
        if hasNoTasks "$tasks"; then
            echo "TODO: No${*:+ such} tasks."
        else
            printf '%s\n' "$tasks"
        fi
    else
        echo "TODO: No${*:+ such} prioritized or due tasks."
    fi
else
    printf '%s\n' "$tasks"
fi
