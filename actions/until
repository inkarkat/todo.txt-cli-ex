#!/bin/bash
###############################################################################
##
# FILE:         until
# PRODUCT:      todo.txt-cli-ex
# AUTHOR:       Ingo Karkat <ingo@karkat.de>
# DATE CREATED: 14-Dec-2011
#
###############################################################################
# CONTENTS:
#
# REMARKS:
#
# SOURCE:
#   Derived from the schedule action by FND:
#   https://github.com/FND/todo.txt-cli/blob/extensions/schedule
#
# @(#)until	$Id$	todo.txt-cli-ex
###############################################################################

action=$1
shift

if [ "$action" = "usage" ]; then
    echo "    $(basename $0) DATE ITEM#[, ITEM#, ...]"
    echo "    $(basename $0) ITEM#[, ITEM#, ...] DATE"
    echo "      Set or change do-until date of a task."
    echo "    $(basename $0) DATE zap ITEM#[, ITEM#, ...]"
    echo "    $(basename $0) ITEM#[, ITEM#, ...] zap DATE"
    echo "      Set or change do-until-then-trash date of a task."
    echo "    $(basename $0) zap [none|never|off|del|rm] ITEM#[, ITEM#, ...]"
    echo "    $(basename $0) ITEM#[, ITEM#, ...] zap [none|never|off|del|rm]"
    echo "      Change \"u:date\" into \"z:date\" [and vice versa]."
    echo "    $(basename $0) none|never|off|del|rm ITEM#[, ITEM#, ...]"
    echo "    $(basename $0) ITEM#[, ITEM#, ...] none|never|off|del|rm"
    echo "      Remove do-until date of a task."
    echo "    $(basename $0) [(any|all|now|on DATE|soon [on DATE]|for DATE) [TERM...]]"
    echo "      List tasks with a do-until \"u:date\" or"
    echo "             do-until-then-trash \"z:date\" ultimate date."
    echo "          with now: only list tasks that are already due"
    echo "          with soon: only list tasks that are already or about to become due"
    echo "          with for DATE: only list tasks that are already or to become due until DATE"
    echo "          with on DATE: as seen on DATE, not today"
    echo "      If TERM specified, lists only tasks that contain TERM(s)."
    echo "      Intended to be used with lsdue and colorFutureTasks."
    echo "      Example: $TODO_SH $(basename $0) \"next week\" 42"
    echo ""
    exit
fi

shopt -s extglob

readonly datePattern='\([0-9]\{2,4\}[^A-Za-z0-9]\)\{2\}[0-9]\{2,4\}' # not enforcing any particular format
readonly pattern=' \([uz]\):'"$datePattern"
readonly errmsg="usage: $TODO_SH $(basename $0) [ITEM#[, ITEM#, ...] DATE [zap]|none|never|off|del|rm|zap [none|never|off|del|rm]]] | [(any|all|now|on DATE|soon [on DATE]|for DATE) [TERM...]]"

ensureFilter()
{
    # Ensure that the latestDueTasks filter is set.
    if [[ "$TODOTXT_FINAL_FILTER" != *latestDueTasks* ]]; then
        if [ "$TODOTXT_FINAL_FILTER" = 'cat' ]; then
            TODOTXT_FINAL_FILTER="${TODO_FILTER_DIR:?}/latestDueTasks"
        else
            TODOTXT_FINAL_FILTER="${TODO_FILTER_DIR:?}/latestDueTasks ${TODOTXT_FINAL_FILTER:+|} ${TODOTXT_FINAL_FILTER}"
        fi
    fi

    # When a threshold is passed, install it.
    if [ $# -gt 0 ]; then
        TODOTXT_FINAL_FILTER=${TODOTXT_FINAL_FILTER/latestDueTasks/latestDueTasks "$1"}

        # Also pass the threshold to the relativeDates filter.
        if [[ "$TODOTXT_FINAL_FILTER" == *relativeDates* ]]; then
            TODOTXT_FINAL_FILTER=${TODOTXT_FINAL_FILTER/relativeDates/relativeDates $1}
        fi
    fi
}
listDue()
{
    threshold=''
    if [ "$1" = 'on' -a "$2" != '' ]; then
        threshold=$(date -d "$2" +%F) || exit 1
        shift
        shift
    fi

    ensureFilter "$threshold"
    post_filter_command="${GNU_PREFIX}sed -e '/^ *[0-9]\+ [xX] /d' -e '/${pattern}/!d'"
    _list "$TODO_FILE" "$@"
}
listSpan()
{
    [ "$1" ] || die "$errmsg"
    thresholdEpoch=$(date -d "$1" +%s) || exit 1
    todayEpoch=$(date -d "$(date +%F)" +%s)
    shift

    export TODOTXT_FILTER_UNTIL_DUE_DAYSPAN=$(((thresholdEpoch - todayEpoch) / 86400))
    ensureFilter
    post_filter_command="${GNU_PREFIX}sed -e '/^ *[0-9]\+ [xX] /d' -e '/${pattern}/!d'"
    _list "$TODO_FILE" "$@"
}
listAll()
{
    post_filter_command="${GNU_PREFIX}sed -e '/^ *[0-9]\+ [xX] /d' -e '/${pattern}/!d'"
    _list "$TODO_FILE" "$@"
}

getUnscheduledTask()
{
    getTodo "$1"

    if [ "$isZap" ]; then
        marker='z'
    else
        # Keep existing type of marker; either "u:" or "z:".
        marker=$(echo "$todo" | "${GNU_PREFIX}"sed -ne "s/^.*${pattern}.*\$/\\1/p")
        # And default to "u:".
        marker=${marker:-u}
    fi

    # Remove threshold and priority.
    unscheduledTodo=$(echo "$todo" | "${GNU_PREFIX}"sed -e "s/${pattern}//g" -e "s/^([A-Z])* //")
}

remove()
{
    getUnscheduledTask "$1"
    if [ "$unscheduledTodo" = "$todo" ]; then
        echo "TODO: $1 is not scheduled."
        return
    fi
    "$TODO_FULL_SH" command replace $1 "$unscheduledTodo" # N.B.: retains priority
}

replace()
{
    local item=$1
    local threshold=$2
    [ -z "$threshold" ] && die "$errmsg"
    date=$(date -d "$threshold" +%F) || return 1

    getUnscheduledTask "$item"
    scheduledTodo="$unscheduledTodo ${marker}:$date"
    if [ "$scheduledTodo" = "$todo" ]; then
        echo "TODO: $1 is already scheduled on ${date}."
        return
    fi
    "$TODO_FULL_SH" command replace $item "$scheduledTodo"
}


if [ $# -eq 0 -o "$1" = 'all' -o "$1" = 'any' -o "$1" = 'now' -o "$1" = 'on' -o "$1" = 'for' -o "$1" = 'soon' ]; then
    what=$1
    shift
    case $what in
        now)        export TODOTXT_FILTER_UNTIL_DUE_DAYSPAN=0; listDue "$@";;
        on)         export TODOTXT_FILTER_UNTIL_DUE_DAYSPAN=0; listDue on "$@";;
        for)        listSpan "$@";;
        soon)       listDue "$@";;
        all|any)    listAll "$@";;
        *)          listAll;;
    esac
    exit $?
fi

isZap=
items=
while [[ "$1" =~ ^[,0-9]+$ ]]
do
    items+=" $1"; shift
done
if [ "$items" ]; then
    [ "$1" = 'zap' ] && { isZap='true'; shift; }
    date=$*
else
    [ "$1" = 'zap' ] && { isZap='true'; shift; }
    [[ "$1" =~ ^[,0-9]+$ ]] || { date=$1; shift; }
    [ "$1" = 'zap' ] && { isZap='true'; shift; }
    items=$*
fi
[ "$items" ] || die "$errmsg"

for item in ${items//,/ }
do
    case $date in
        '')
            if [ "$isZap" ]; then
                "$TODO_FULL_SH" subst "$item" " u:\\($datePattern\\)" ' z:\1'
            else
                die "$errmsg"
            fi
            ;;
        none|never|off|del|rm)
            if [ "$isZap" ]; then
                "$TODO_FULL_SH" subst "$item" " z:\\($datePattern\\)" ' u:\1'
            else
                remove "$item"
            fi
            ;;
        *)
            replace "$item" "$date"
            ;;
    esac
done
