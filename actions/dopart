#!/bin/bash
###############################################################################
##
# FILE:         dopart
# PRODUCT:      todo.txt-cli-ex
# AUTHOR:       Ingo Karkat <ingo@karkat.de>
# DATE CREATED: 22-Nov-2013
#
###############################################################################
# CONTENTS:
#
# REMARKS:
#
# COPYRIGHT: (C) 2013-2023 Ingo Karkat
#   This program is free software; you can redistribute it and/or modify it
#   under the terms of the GNU General Public License.
#   See http://www.gnu.org/copyleft/gpl.txt
#
###############################################################################

action=$1
shift

[ "$action" = "usage" ] && {
    echo "    $(basename $0) ITEM# PART#[, PART#, ...] [COMMENT]"
    echo "      Marks the part with count PART# (determined by splitting on [,;] and the"
    echo "      word \"and\") of the line ITEM# as done, optionally appending COMMENT."
    echo "    $(basename $0) ITEM#"
    echo "      Lists all parts (determined by splitting on [,;] and the word \"and\")"
    echo "      of the line ITEM#."
    echo "    $(basename $0) ITEM# PATTERN [COMMENT]"
    echo "      Marks the part the line ITEM# that matches PATTERN as done, optionally"
    echo "      appending COMMENT."
    echo ""
    exit
}

: ${TODOTXT_COMMENT_SYMBOL:= => }
: ${TODOTXT_PARTIALDONE_SEPARATOR_PATTERN=',? +and +|[,;] +'}   # Note: This is in Extended regular expression format (ERE).
: ${TODOTXT_PARTIALDONE_PATTERN='\([^()]+ => [0-9]{4}-[0-9]{2}-[0-9]{2}( [^()]+)?\)'}   # Note: This is in Extended regular expression format (ERE).
: ${TODOTXT_PARTIALDONE_TEMPLATE="(%s${TODOTXT_COMMENT_SYMBOL}%s)"}
: ${TODOTXT_PARTIALDONE_TEMPLATE_WITH_COMMENT="(%s${TODOTXT_COMMENT_SYMBOL}%s %s)"}
shopt -s extglob
. "${TODO_ACTIONS_DIR}/../lib/common.sh"

listParts()
{
    echo "$text" | ${GNU_PREFIX}sed -E -e "s/${TODOTXT_PARTIALDONE_SEPARATOR_PATTERN}/\\n/g" | ${GNU_PREFIX}sed = | ${GNU_PREFIX}sed -e 'N; s/\n/ /'
}
doParts()
{
    # First check the parts individually ...
    for part in "${parts[@]}"
    do
        if echo "$part" | grep -q -E "^ *${TODOTXT_PARTIALDONE_PATTERN} *$"; then
            die "TODO: That part is already done: $part"
        fi
    done
    # ... then all concatenated.
    IFS=' '
    if echo "${parts[*]}" | grep -q -E "^ *${TODOTXT_PARTIALDONE_PATTERN} *$"; then
        die "TODO: These parts are already done: ${parts[*]}"
    fi


    local now=$("${GNU_PREFIX}"date '+%Y-%m-%d')
    if [ "$*" ]; then
        local comment=${*#${TODOTXT_COMMENT_SYMBOL# }}
        comment=${comment//\\/\\\\}
        comment=${comment//&/\\&}
        local donePart=$(printf "$TODOTXT_PARTIALDONE_TEMPLATE_WITH_COMMENT" "&" "$now" "$comment")
    else
        local donePart=$(printf "$TODOTXT_PARTIALDONE_TEMPLATE" "&" "$now")
    fi

    # Concatenate the literally matched parts with the pattern for the part
    # separator.
    local partPattern=
    local isFirst=t
    for part in "${parts[@]}"
    do
        [ "$isFirst" ] && isFirst= || partPattern+="(${TODOTXT_PARTIALDONE_SEPARATOR_PATTERN})"
        partPattern+="$(echo "$part" | ${GNU_PREFIX}sed -e 's/[][\$*.^|+?(){}#]/\\&/g')"
    done

    ${GNU_PREFIX}sed -E -i.bak "$item s#${partPattern}#${donePart//#/\\#}#" "$TODO_FILE" || exit $?
    getNewtodo "$item"
    if [ $TODOTXT_VERBOSE -gt 0 ]; then
        echo "$item $newtodo"

        # To get the actual text of the parts that were done (including the used
        # separators), substitute the original task again and this time extract
        # the part pattern.
        changedPart=$(echo "$todo" | ${GNU_PREFIX}sed -E "s#^.*(${partPattern}).*\$
        echo "TODO: part of $item marked as done: ${changedPart}"
    fi
}


errmsg="usage: $TODO_SH $(basename $0) ITEM# PART#|PATTERN [COMMENT]"
item=$1; shift
[ -z "$item" ] && die "$errmsg"
[[ "$item" = +([0-9]) ]] || die "$errmsg"
getTodo "$item"

splitTodo "$todo"

if [[ "$1" =~ ^[,0-9]+$ ]]; then
    counts=
    while [[ "$1" =~ ^[,0-9]+$ ]]
    do
        counts+="${counts:+ }$1"
        shift
    done
    typeset -a countList=(${counts//,/ })
    typeset -a parts=()
    let countIdx=0
    while [ $countIdx -lt ${#countList[@]} ]
    do
        count=${countList[$countIdx]}
        part=$(echo "$text" | ${GNU_PREFIX}sed -E -e "s/${TODOTXT_PARTIALDONE_SEPARATOR_PATTERN}/\\n/g" | ${GNU_PREFIX}sed -ne "${count}p")
        if [ ! "$part" ]; then
            echo "TODO: No part ${count}; available parts:"
            listParts
            exit 1
        fi
        parts+=("$part")
        if [ $((countIdx + 1)) -eq ${#countList[@]} ] || [ ${countList[$((countIdx + 1))]} -ne $((count + 1)) ]; then
            doParts "$@"
            parts=()
        fi

        let countIdx+=1
    done
elif [ "$1" ]; then
    pattern=$1
    shift
    case $pattern in
        ^*)     before='';;
        \.\**)  before='^';;
        *)      before='^.*';;
    esac
    case $pattern in
        *\$)    after='';;
        *\.\*)  after='$';;
        *)      after='.*$';;
    esac
    part=$(echo "$text" | ${GNU_PREFIX}sed -ne "s/${before}\(${pattern//\//\\/}\)${after}/\1/gp")
    if [ ! "$part" ]; then
        # The pattern did not match in the main task text, try in the prepends
        # and appends; maybe the user wants to mark a particular +project or
        # @context done.
        part=$(echo "$prepends $appends" | ${GNU_PREFIX}sed -ne "s/${before}\(${pattern//\//\\/}\)${after}/\1/gp")
    fi
    [ "$part" ] || die "TODO: pattern \"${pattern}\" does not match"
    [ "$part" = "$text" ] && die "TODO: pattern \"${pattern}\" matches the entire task"

    typeset -a parts=("$part")
    doParts "$@"
else
    echo "TODO: Available parts:"
    listParts
    exit 0
fi

splitTodo "$newtodo"
remainder=$(echo "$text" | ${GNU_PREFIX}sed -E -e "s/${TODOTXT_PARTIALDONE_PATTERN}//g" -e 's/ and //g' -e 's/[ \t,.;:+-]//g')
if [ ! "$remainder" ]; then
    echo "TODO: All parts are completely done now; marking entire task as done."
    "$TODO_FULL_SH" do $item
fi
