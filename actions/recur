#!/bin/bash
###############################################################################
##
# FILE:         recur
# PRODUCT:      todo.txt-cli-ex
# AUTHOR:       Ingo Karkat <ingo@karkat.de>
# DATE CREATED: 25-Feb-2011
#
###############################################################################
# CONTENTS:
#
# REMARKS:
#   The recurrence is stored as {DATE}, not via a marker such as r:DATE to avoid
#   rendering (by the relativeDates filter) and canonicalization (by the add
#   actions) into a fixed date; which would confuse / break the recurrent
#   scheduling.
#
# COPYRIGHT: (C) 2010-2013 Ingo Karkat
#   This program is free software; you can redistribute it and/or modify it
#   under the terms of the GNU General Public License.
#   See http://www.gnu.org/copyleft/gpl.txt
#
###############################################################################

action=$1
shift

[ "$action" = "usage" ] && {
    echo "    $(basename $0) ITEM# RELATIVEDATE"
    echo "      Make task ITEM# recurrent each RELATIVEDATE."
    echo "    $(basename $0) ITEM# none|never"
    echo "      Completely remove the scheduling of task ITEM#."
    echo "    $(basename $0) ITEM# off"
    echo "      Remove the recurrent scheduling of task ITEM#."
    echo "      The task will still be scheduled once more."
    echo "    $(basename $0) [list [TERM...]]"
    echo "      List recurring tasks that contain TERM(s)."
    echo ""
    exit
}

shopt -s extglob
errmsg="usage: $TODO_SH $(basename $0) [list [TERM...]]|[ITEM# RELATIVEDATE|none|never|off]"

extractRecurDate()
{
    "${GNU_PREFIX}"sed -ne 's#^.*[[:space:]]\+{\([^}]\+\)}\([[:space:]].*$\|$\)#\1#p'
}
validRecurringFilter()
{
    while IFS=$'\n' read -r todo
    do
        recur=$(echo "$todo" | extractRecurDate)
        if [ "$recur" ]; then
            if date -d "$recur" +%F >/dev/null 2>/dev/null; then
                echo "$todo"
            fi
        fi
    done
}
listRecurring()
{
    # Disable the futureTasks filter that hides recurring tasks scheduled in the
    # future.
    export TODOTXT_FILTER_FUTURE_TASKS=0

    post_filter_command="grep -e '{[^}]\+}' | validRecurringFilter"
    _list "$TODO_FILE" "$@"
}

if [ $# -eq 0 ]; then
    listRecurring
    exit $?
elif [ "$1" = 'list' ]; then
    shift
    listRecurring "$@"
    exit $?
else
    item=$1; shift
fi

getTodo "$item"
# Get task without potential priority, the "replace" command will maintain the
# priority.
todo=${todo#(?) }

recur=$*; shift
recurType=
command="replace $item"
isApply=

if [ "$recur" = 'apply' ]; then
    # This hidden subcommand is invoked by the "do" command to trigger the
    # recurrence. A new recurrent task is created from the old done task.

    recur=$(echo "$todo" | extractRecurDate)
    [ "$recur" ] || exit 0
    command='add'
    isApply=t

    # Clone the current task:
    # - Re-get task with potential priority, we want to keep it.
    # - Remove the done flag and done date.
    # - Update the creation date if the task has one. An additional entry date
    #   via TODOTXT_DATE_ON_ADD will be suppressed by the -T option.
    # - The scheduling marker will be updated by the regular code below.
    # - Finally, when such exists, the user is asked (maybe he wants to
    #   accumulate them) whether the done comment should be removed.
    today=$("${GNU_PREFIX}"date +%F)
    todo=$("${GNU_PREFIX}"sed -e "$item!d" -e 's/^x [0-9]\{2,4\}-[0-9]\{2\}-[0-9]\{2\} //' -e 's/^\(([A-Z]) \)\{0,1\}[0-9]\{2,4\}-[0-9]\{2\}-[0-9]\{2\} /\1'"${today}"' /' "$TODO_FILE") || exit $?
fi

case $recur in
    none|never)
        newtodo=$(echo "$todo" | "${GNU_PREFIX}"sed -e 's#[[:space:]]\+t:\([0-9]\{2,4\}[^A-Za-z0-9]\)\{2\}[0-9]\{2,4\}##g' -e 's#[[:space:]]\+{[^}]\+}\([[:space:]]\|$\)#\1#')
        ;;
    off)
        recurType='Last'
        nextdate=$(echo "$todo" | "${GNU_PREFIX}"sed -e 's#^.*[[:space:]]\+t:\(\([0-9]\{2,4\}[^A-Za-z0-9]\)\{2\}[0-9]\{2,4\}\).*$#\1#g')
        newtodo=$(echo "$todo" | "${GNU_PREFIX}"sed -e 's#[[:space:]]\+{[^}]\+}\([[:space:]]\|$\)#\1#')
        ;;
    *)
        recurType='Next'
        nextdate=$("${GNU_PREFIX}"date -d "$recur" +%F) || die "TODO: Invalid recurrence date format."
        recurrence="{${recur}} t:${nextdate}"
        newtodo=$(echo "$todo" | "${GNU_PREFIX}"sed -e 's#[[:space:]]\+t:\([0-9]\{2,4\}[^A-Za-z0-9]\)\{2\}[0-9]\{2,4\}##g' | "${GNU_PREFIX}"sed -e 's#\([[:space:]]\+\){[^}]\+}\([[:space:]]\|$\)#\1'"${recurrence}"'\2#;t' -e 's#$# '"${recurrence}"'#')
        ;;
esac

if [ "$command" != "add" -a "$newtodo" = "$todo" ]; then
    [ $TODOTXT_VERBOSE -gt 0 ] && echo "$item $todo"
    die "TODO: Recurrence didn't change"
fi
"$TODO_FULL_SH" -T command $command "$newtodo" || exit $?

if [ "$recurType" ]; then
    today=$("${GNU_PREFIX}"date +%F)   # Need to calculate time differences from midnight.
    todaySeconds=$("${GNU_PREFIX}"date -d "$today" +%s)
    nextSeconds=$("${GNU_PREFIX}"date -d "$nextdate" +%s)
    recurTimespan=$(((nextSeconds - todaySeconds) / (24 * 3600)))
    case $recurTimespan in
        0)  recurTimespan="that's today!";;
        1)  recurTimespan="in $recurTimespan day";;
        *)  recurTimespan="in $recurTimespan days";;
    esac
    echo "TODO: $recurType scheduled for $nextdate, $recurTimespan"
fi

if [ "$isApply" -a -x "$TODO_ACTIONS_DIR/uncomment" ]; then
    # Figure out the line of what we just added, and "uncomment" it.
    item=$("${GNU_PREFIX}"sed -n '$ =' "$TODO_FILE") || exit $?
    "$TODO_FULL_SH" uncomment -q "$item"
fi
