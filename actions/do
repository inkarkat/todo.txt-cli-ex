#!/bin/bash
###############################################################################
##
# FILE:         do
# PRODUCT:      todo.txt-cli-ex
# AUTHOR:       Ingo Karkat <ingo@karkat.de>
# DATE CREATED: 29-Jun-2010
#
###############################################################################
# CONTENTS:
#
# REMARKS:
#
# COPYRIGHT: (C) 2010-2023 Ingo Karkat
#   This program is free software; you can redistribute it and/or modify it
#   under the terms of the GNU General Public License.
#   See http://www.gnu.org/copyleft/gpl.txt
#
# @(#)do	$Id$	todo.txt-cli-ex
###############################################################################

action=$1
shift

[ "$action" = "usage" ] && {
    echo "    $(basename $0) ITEM#[, ITEM#, ITEM#, ...] [COMMENT]"
    echo "      Marks task(s) on line ITEM# as done in todo.txt,"
    echo "      optionally appending COMMENT."
    echo "      Other task(s) that are dependent on w:ITEM# have that blocker removed."
    echo "      Other task(s) contradependent on j:ITEM# are trashed, and"
    echo "      j:OTHER# other contradependent task(s) are trashed."
    echo "      Other j:GOAL tasks that share the same GOAL are trashed."
    echo "      All joined tasks are processed (unblock, recurrence, links, kill)"
    echo "      as if they were done, but all except ITEM# itself are actually trashed."
    echo "      l:OTHER# linked task(s) are marked done, too."
    echo "      k:OTHER# kill task(s) are trashed."
    echo "    $(basename $0) trash ITEM#[, ITEM#, ITEM#, ...] [COMMENT]"
    echo "      Perform all the processing for done tasks, but actually mark the task(s)"
    echo "      on line ITEM# as trashed."
    echo ""
    exit
}

errmsg="usage: $TODO_SH $(basename $0) [trash] ITEM#[, ITEM#, ITEM#, ...] [COMMENT]"
[ $# -eq 0 ] && die "$errmsg"

isTrashInstead=
if [ "$1" = 'trash' ]; then
    isTrashInstead='true'
    shift
fi

items=
while [[ "$1" =~ ^[,0-9]+$ ]]
do
    items+=" $1"; shift
done
[ "$items" ] || die "$errmsg"

[ "$RECURSIVE_DO" ] || > ~/.todo-lastdone
originalAutoArchive=$TODOTXT_AUTO_ARCHIVE; TODOTXT_AUTO_ARCHIVE=0   # Don't immediately auto-archive; it would interfere with subsequent unblocking, recurrence, and the numbering of additional passed ITEM#, and also trigger multiple times.
for item in ${items//,/ }
do
    # Always append more even when the task is already done.
    if [ "$*" ]; then
        "$TODO_FULL_SH" command append $item "$@" || exit $?
    fi

    getTodo "$item"

    if [ "$isTrashInstead" ]; then
        if [ "${todo:0:2}" != 'X ' ]; then
            # The task may have already been trashed by another recursion level.
            # Prevent the trash error message in such a case.
            RECURSIVE_DO='true' "$TODO_FULL_SH" trash $item || exit $?
        fi
    elif [ "${todo:0:2}" = 'X ' ]; then
        die "TODO: $item is already marked as trashed."
    else
        "$TODO_FULL_SH" command do $item || exit $?
        printf '%s ' $item >> ~/.todo-lastdone
    fi



    # Unblock tasks that depended on the now done task.
    if [ -x "$TODO_ACTIONS_DIR/unwait" ]; then
        "$TODO_FULL_SH" unwait 'for' $item 2>&1 | grep -v '^TODO: No tasks that contain the dependent tasks found.$'
    fi

    # Handle potential recurrence of the now done task.
    if [ -x "$TODO_ACTIONS_DIR/recur" ]; then
        "$TODO_FULL_SH" recur $item apply
    fi



    # Cascade done to tasks linked from the now done task.
    linkMarkers=$(echo "$todo" | grep -o '[^ ]*l:[[:digit:]]\+' | grep '^l:')
    if [ "$linkMarkers" ]; then
        links=$(echo "$linkMarkers" | "${GNU_PREFIX}"sed -n -e 's/^l://' -e '1h' -e '1!H' -e '$g' -e '$s/\n/, /g' -e '$p')
        echo "TODO: $item is linked to ${links}; cascading done marker."
        for link in $linkMarkers
        do
            # Use a subshell to avoid that an error (e.g. non-existent task)
            # breaks out of the loop or even aborts the entire processing.
            (
                linkedItem=${link#l:}
                getTodo "$linkedItem"

                # Test for already done tasks to avoid endless loop when tasks
                # are cross-linked or tasks form a closed graph.
                [ "${todo:0:2}" = 'x ' ] || RECURSIVE_DO='true' "$TODO_FULL_SH" do $linkedItem "$@"
            )
        done
    fi


    # Trash to-be-killed tasks referenced by the now done task.
    if [ -x "$TODO_ACTIONS_DIR/trash" ]; then
        killMarkers=$(echo "$todo" | grep -o '[^ ]*k:[[:digit:]]\+' | grep '^k:')
        if [ "$killMarkers" ]; then
            killedItems=$(echo "$killMarkers" | "${GNU_PREFIX}"sed -n -e 's/^k://' -e '1h' -e '1!H' -e '$g' -e '$s/\n/, /g' -e '$p')
            echo "TODO: $item trashes ${killedItems}."
            for killMarker in $killMarkers
            do
                # Use a subshell to avoid that an error (e.g. non-existent task)
                # breaks out of the loop or even aborts the entire processing.
                (
                    killedItem=${killMarker#k:}
                    getTodo "$killedItem"

                    # Test for already trashed tasks to avoid endless loop when tasks
                    # are cross-killed or tasks form a closed graph.
                    [ "${todo:0:2}" = 'X ' ] || RECURSIVE_DO='true' "$TODO_FULL_SH" trash $killedItem "$@"
                )
            done
        fi
    fi



    # Trash contradependent tasks referenced by the now done task or which share
    # the same GOAL and tasks that reference the now done task.
    referencedItems=
    joinMarkers=$(echo "$todo" | grep -o '[^ ]*j:[^(][^[:space:]]*' | grep '^j:'; echo "$todo" | grep -o '[^ ]*j:([^)]\+)' | grep '^j:')

    # Find other tasks referencing either the current ITEM# or any of the GOALs
    # found in the current task.
    referencingPattern=$(echo "$joinMarkers" | grep -v -e '^j:[0-9]\+$')
    referencingPattern+="${referencingPattern:+$'\n'}j:${item}"
    referencingPattern="\\(^\\| \\)\\(${referencingPattern//$'\n'/\\|}\\)"
    referencedItems=$("${GNU_PREFIX}"sed -n -e '/^[xX] /b' -e "/${referencingPattern}/=" "$TODO_FILE") || exit $?

    # Add the tasks referenced from the current task, unless they're already
    # done or trashed.
    referencedFromHere=$(echo "$joinMarkers" | grep -e '^j:[0-9]\+$')
    if [ "$referencedFromHere" ]; then
        referencedFromHere=${referencedFromHere//j:/}
        referencedFromHereItems=$("${GNU_PREFIX}"sed -n -e "${referencedFromHere/$'\n'/b check}b check" -e 'b' -e ':check' -e '/^[xX] /!=' "$TODO_FILE") || exit $?
        [ "$referencedFromHereItems" ] && referencedItems=$(echo "${referencedItems}${referencedItems:+
}${referencedFromHereItems}" | sort)
    fi

    # Recursively trash all those tasks, but process them as if they were done.
    # To achieve both recursion and processing, we do not delegate to the trash
    # action, but recursively invoke ourself with the hidden "do trash"
    # subaction.
    if [ "$referencedItems" ]; then
        [ "${referencedItems//$'\n'/}" = "$referencedItems" ] && howManyReferences='the latter' || howManyReferences='those others'
        echo "TODO: $item is contradependent on ${referencedItems//$'\n'/,}; trashing ${howManyReferences}."
        eval 'RECURSIVE_DO=true "$TODO_FULL_SH" do trash' ${referencedItems//$'\n'/ } '"$@"'
    fi


    : # Always exit with a successful exit code even when the command complained.
done

# Only perform the auto-archiving once at the end, after all ITEM# have been
# done, and tasks have been unblocked, recurrence applied, and trashed.
# tasks have been trashed.
if [ $originalAutoArchive = 1 ]; then
    "$TODO_FULL_SH" archive
fi
