#!/bin/bash
###############################################################################
##
# FILE:         standup
# PRODUCT:      todo.txt-cli-ex
# AUTHOR:       Jonathan C Dietrich
# 		based off of work by Paul Mansfield
# MAINTAINER:   Ingo Karkat <ingo@karkat.de>
# DATE CREATED: 11-Apr-2010
#
###############################################################################
# CONTENTS:
#
# REMARKS:
#
# SOURCE:
#   https://github.com/the1ts/todo.txt-plugins/tree/master/actions/projectview
#
# COPYRIGHT: (C) 2023 	   Jonathan C. Dietrich
# 	     (C) 2009-2022 Paul Mansfield
#            (C) 2010-2012 Ingo Karkat
#   This program is free software; you can redistribute it and/or modify it
#   under the terms of the GNU General Public License.
#   See http://www.gnu.org/copyleft/gpl.txt
#
###############################################################################

action=$1
shift

[ "$action" = "usage" ] && {
    echo "    $(basename $0) standup [FUZZY_DATE]"
    echo "      Displays all done (as well as archived) tasks since the date specified."
    echo "      The FUZZY_DATE can be a human phrase for instance 'last thurs'."
    echo "      If TERM specified, lists only tasks that contain TERM(s)."
    echo ""
    exit
}

args=("$@")

# Create a new empty array to hold the filtered arguments
fuzzydate_params=()
filters=()
additional_filter_command=

TODO_MARKDOWN_RENDERER=${TODO_MARKDOWN_RENDERER:-${TODO_DIR}/bin/tty_markdown}
TODO_STANDUP_JIRA=${TODO_STANDUP_JIRA:-0}
TODO_STANDUP_PRS=${TODO_STANDUP_PRS:-0}

 # Loop through each argument
 for arg in "${args[@]}"; do
     # Check if the argument starts with a hyphen or plus
     # as these are filters to include or exclude
     if [[ ${arg:0:1} =~ [-+@] && ${#arg} -gt 1 ]]; then
         # Add the argument to the filtered array
         filters+=("$arg")
     else
         # Add the argument to the fuzzydate_params array
         fuzzydate_params+=("$arg")
     fi
 done

# Omit the "done" highlighting in favor of the more readable alternating task
# highlighting for readability; all tasks are done, anyway.
# export HIDE_COLOR_DONE=1
export TODOTXT_FILTER_DATE_SINCE=$(fuzzydate "${fuzzydate_params[*]}" | cut -c 1-10 )
TODO_FILTER_DAY_OF_WEEK=$("${GNU_PREFIX}"date -d "${TODOTXT_FILTER_DATE_SINCE}" "+%A")
TODO_STANDUP_CREATION_DATE=$(gdate  +%F)
TODO_STANDUP_DAY_OF_WEEK=$("${GNU_PREFIX}"date -d "${TODOTXT_FILTER_DATE_SINCE}" "+%A")

additional_filter_command="TODOTXT_FILTER_DATE_SINCE=${TODOTXT_FILTER_DATE_SINCE} ${TODO_FILTER_DIR:?}/datesince | "

makeTaskCounts()
{
#	input=$(cat)
done=$(echo "$input" | grep -c '[0-9]* *x ')
total=$(echo "$input" | wc -l)
todo=$(( total - done ))
echo "done: $done, todo: $todo"
}

# Configuration to only summarize many unassociated tasks.
: "${TODOTXT_PROJECTVIEW_UNASSOCIATED_THRESHOLD:=10}"

original_TODOTXT_VERBOSE=$TODOTXT_VERBOSE
TODOTXT_VERBOSE=0
TODOTXT_DISABLE_FILTER=1

markdown=()
markdown+=("% Standup: Work Since ${TODOTXT_FILTER_DATE_SINCE} (${TODO_FILTER_DAY_OF_WEEK})\n% Joanthan C. Dietrich\n% ${TODO_STANDUP_CREATION_DATE}\n")

# Show projects in alphabetical order and tasks in priority order.
(( projectCnt=0 ))
tasks=

# Find all projects.
readonly projects=$("$TODO_FULL_SH" command listproj "${filters[@]}")

# For each project show header and the list of tasks.
#export HIDE_PROJECTS_SUBSTITUTION='[[:space:]][+][[:graph:]]\{1,\}' # Omitting all projects from the list.
for project in $projects; do
    # Use core _list function, does numbering and coloring for us.
    post_filter_command="${additional_filter_command}grep '$project\\( \\|$\\)'"
    projectList_done="$(_list "$DONE_FILE" "${filters[@]}")"
    projectList_current="$(_list "$TODO_FILE" "${filters[@]}")"

    projectList="${projectList_done}""${NEW_LINE}""${projectList_current}"

    # Even though we're operating only on project tasks containing TERM,
    # a task filter may still filter away all tasks for a project.
    list_check_existance=$(echo "${projectList}" | tr -cd "[:print:]" )

    if [ "$list_check_existance" ]; then 
        taskCounts=$(echo "${projectList}" | makeTaskCounts)
        [ $projectCnt -gt 0 ] && echo ""
	projectTitle="${project#+}"

	if [[ "$projectTitle" =~ ^[0-9]+ ]]
	then
	   projectTitle="MNS-${projectTitle}"	
	   isTicket=true
	else
 	   isTicket=
	fi

        markdown+=("\n*****\n")

	if [ "$isTicket" ]; then
          if [ "$TODO_STANDUP_JIRA" -ne 0 ]; then
             markdown+=("$("${TODO_DIR}"/bin/jira_info "${projectTitle}")\n")
          else
             markdown+=("\n## ${projectTitle}\n")
          fi	
	  if [ "$TODO_STANDUP_PRS" -ne 0 ]; then
	    markdown+=("\n### Pull Requests\n")

	    markdown+=("$("${TODO_DIR}"/bin/pr_info "${project#+}")\n")
	  fi
	else
          markdown+=("\n## ${projectTitle}\n")
	fi

	markdown+=("\n### Tasks\n\n")
	markdown+=("  - Done\n")
	markdown+=("${projectList_done}\n")
	markdown+=("  - Active\n")
	markdown+=("${projectList_current}\n")

        if [ "$original_TODOTXT_VERBOSE" -gt 0 ]; then
          (( projectCnt+=1 ))
          tasks+="${tasks:+$'\n'}$projectList"
        fi
    fi
done

# Show tasks not associated to a project.
unassociatedCnt=0
post_filter_command="${additional_filter_command}grep -ve '[[:space:]]+[[:graph:]]'"
projectList=$(_list "$TODO_FILE" "${filters[@]}")

if [ "${projectList}" ]; then
    unassociatedCnt=$(echo "$projectList" | "${GNU_PREFIX}"sed -n '$ =')
    unassociatedCounts=$(echo "${projectList}" | makeTaskCounts)

    if [ "${unassociatedCnt}" -le "${TODOTXT_PROJECTVIEW_UNASSOCIATED_THRESHOLD}" ]; then
        [ $projectCnt -gt 0 ] && echo ""

        markdown+=("\n*****\n")
	markdown+=("\n# Not In Projects (${unassociated})\n\n")

	markdown+=("  - Done\n")
	markdown+=("${projectList_done}\n")
	markdown+=("  - Active\n")
	markdown+=("${projectList_current}\n")
    fi
fi

if [ "$original_TODOTXT_VERBOSE" -gt 0 ]; then
    (( taskCnt=$(echo "$tasks" | sort -u | "${GNU_PREFIX}"sed -n '$ =') ))

    markdown+=("-------") 

    if [ $projectCnt -gt 0 ]; then
       markdown+=("TODO: $taskCnt task(s) in $projectCnt projects.")
    else
       markdown+=("TODO: No projects found.")
    fi
    if [ "${unassociatedCnt}" -gt "${TODOTXT_PROJECTVIEW_UNASSOCIATED_THRESHOLD}" ]; then
       markdown+=("TODO: $unassociatedCounts task(s) not in projects.")
    fi
fi

# create a backup of a clean version of the markdown
"${TODO_DIR}/bin/clean_markdown" "${markdown[*]}" > "${TODOTXT_BACKUP_DIR}/standup-${TODO_STANDUP_CREATION_DATE}.md"

"${TODO_MARKDOWN_RENDERER}" "${markdown[*]}"

