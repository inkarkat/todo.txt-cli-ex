#!/bin/bash
###############################################################################
##
# FILE:         lswait
# PRODUCT:      todo.txt-cli-ex
# AUTHOR:       Ingo Karkat <ingo@karkat.de>
# DATE CREATED: 24-Feb-2012
#
###############################################################################
# CONTENTS:
#
# REMARKS:
#
# COPYRIGHT: (C) 2010-2024 Ingo Karkat
#   This program is free software; you can redistribute it and/or modify it
#   under the terms of the GNU General Public License.
#   See http://www.gnu.org/copyleft/gpl.txt
#
# @(#)lswait	$Id$	todo.txt-cli-ex
###############################################################################

action=$1
shift

[ "$action" = "usage" ] && {
    echo "    $(basename $0) [TERM...]"
    echo "      Displays all blocked tasks that wait for a precondition."
    echo "      If TERM specified, lists only tasks that contain TERM(s)."
    echo "    $(basename $0) for DEPITEM#[, DEPITEM#, ...]"
    echo "    $(basename $0) for REASON[, REASON, ...]"
    echo "      Displays all tasks that are blocked because of a dependency to"
    echo "      any one of DEPITEM#(s) or REASON."
    echo ""
    exit
}

# Omit the "blocked" highlighting in favor of the more readable alternating task
# highlighting for readability; all tasks are blocked, anyway. Also, this way
# the "blocker" highlighting stands out better and puts further emphasis on
# them.
export COLOR_BLOCKED=

if [ "$1" = 'for' -a $# -gt 1 ]; then
    # We have dependent tasks DEPITEM# or REASON.
    shift # Remove the "for" filler argument.

    waitPattern=
    for waitDependence
    do
        if [[ "$waitDependence" =~ ^[0-9,]+$ ]]; then
            for waitDependentTaskNum in ${waitDependence//,/ }
            do
                waitPattern=${waitPattern}${waitPattern:+\\|}${waitDependentTaskNum}
            done
        else
            # Enclose REASONs in parentheses if they consist of multiple words.
            waitPattern=${waitPattern}${waitPattern:+\\|}$(echo "$waitDependence" | "${GNU_PREFIX}"sed -e '/[ \t]/s/.*/(&)/')
        fi
    done
    waitPattern=' w:\('${waitPattern}'\)\([ \t]\|$\)'

    items=$("${GNU_PREFIX}"sed -n -e '/[xX] /b' -e "/${waitPattern}/=" "$TODO_FILE") || exit $?
    items=${items//$'\n'/ } # Flatten all collected task numbers into a space-delimited list.
    if [ "$TODOTXT_LSWAIT_SHOW_ITEMS" ]; then
        # Hidden functionality for other addons.
        echo "$items"
    else
        if [ "$items" ]; then
            _list "$TODO_FILE" "^ *\\(${items// /\\|}\\) "
        else
            IFS=,
            dependencyText="$*"
            unset IFS
            dependencyText="${dependencyText//,/, }"
            die "TODO: No tasks have a dependency to ${dependencyText}."
        fi
    fi
else
    # Consider only tasks that are not yet done or trashed and contain the "w:"
    # wait marker.
    # The tasks are already numbered when the filter is applied, so there
    # definitely is a space in front of the marker.
    post_filter_command="grep -ve '^ *[0-9]\+ [xX] ' | grep -e ' w:[^ ]'"

    _list "$TODO_FILE" "$@" | "${GNU_PREFIX}"sed -e '/^TODO:/s/of [0-9]\+ tasks shown/blocked \0/'
fi
