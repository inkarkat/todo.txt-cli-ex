#!/bin/bash
###############################################################################
##
# FILE:         defragment
# PRODUCT:      todo.txt-cli-ex
# AUTHOR:       Ingo Karkat <ingo@karkat.de>
# DATE CREATED: 18-Aug-2010
#
###############################################################################
# CONTENTS:
#
# REMARKS:
#
# COPYRIGHT: (C) 2010-2024 Ingo Karkat
#   This program is free software; you can redistribute it and/or modify it
#   under the terms of the GNU General Public License.
#   See http://www.gnu.org/copyleft/gpl.txt
#
###############################################################################

action=$1
shift

[ "$action" = "usage" ] && {
    echo "    $(basename $0)"
    echo "      Cleans empty lines from todo.txt while adapting cross-task references"
    echo "      of the form m:### or \"task ###\". "
    echo ""
    exit
}

set -o pipefail

: ${TODOTXT_DEFRAGMENT_MARKER_PATTERN:='^[[:graph:]]:[0-9]+$'}
: ${TODOTXT_DEFRAGMENT_REFERENCE_PATTERN:='^task$'}

# Defragment blank lines.
# Note: Deletion of blank lines must proceed from end to begin to avoid adapting
# remaining line numbers.
emptyLineNums=$("${GNU_PREFIX}"sed -n '/./!=' "$TODO_FILE" | tac) || exit $?
finalLineNumber=$(echo "$emptyLineNums" | ${GNU_PREFIX}sed -ne '$p')
for emptyLineNum in $emptyLineNums
do
    # As each empty line is processed separately, the self-reference warning
    # would appear on each iteration again. Only do this on the last one, when
    # the script is able to print the final line number.
    [ "$emptyLineNum" = "$finalLineNumber" ] && isSelfReferenceWarning=1 || isSelfReferenceWarning=0

    "${GNU_PREFIX}"awk \
            -v "markerPattern=$TODOTXT_DEFRAGMENT_MARKER_PATTERN" \
            -v "referencePattern=$TODOTXT_DEFRAGMENT_REFERENCE_PATTERN" \
            -v "lineNum=$emptyLineNum" \
            -v "isSelfReferenceWarning=$isSelfReferenceWarning" \
'
function adapt(oldNum,     todo) {
    if (oldNum > lineNum) {
        if (isSelfReferenceWarning && oldNum == NR) {
            todo = $0
            gsub(NR, NR - 1, todo)  # The pattern is not very strict; let us hope there is no other occurrence of that particular number in the line.
            print NR - 1 " " todo > "/dev/stderr"

            print "TODO: Self-referential task " NR - 1 > "/dev/stderr"
        }
        return oldNum - 1
    } else if (oldNum == lineNum) {
        print NR " " $0 > "/dev/stderr"
        print "TODO: Invalidate reference to cleared task " lineNum > "/dev/stderr"
        return "???"
    } else {
        return oldNum
    }
}
BEGIN { FS = "[ \t]" }
NR == lineNum {
    if ($0 == "") {
        next
    } else {
        print "ASSERT: passed line number " lineNum " should be empty!" > "/dev/stderr"
        exit 2
    }
}
{
    for (i = 1; i <= NF; ++i) {
        if ($i ~ markerPattern) {
            match($i, /[0-9]+/)
            oldNum = substr($i, RSTART, RLENGTH) + 0
            sub(/[0-9]+/, adapt(oldNum), $i)
        } else if ($(i - 1) ~ referencePattern && $i ~ /^[0-9]+$/) {
            oldNum = $i + 0
            $i = adapt(oldNum)
        }
    }
}; 1' \
        "$TODO_FILE" > "${TODO_FILE}.bak" \
            && mv "${TODO_FILE}.bak" "${TODO_FILE}" \
            || die 'Fatal Error: Unable to process tasks.'
done
