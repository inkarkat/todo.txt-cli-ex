#!/usr/bin/env python

""" TODO.TXT Bird's Eye View Reporter
USAGE NOTES:
    Works on the raw, unfiltered text files referenced by $TODO_FILE and
    $DONE_FILE, each of which formatted as follows:
    - One todo per line, ie, "call Mom"
    - with an optional project association indicated as such: "+projectname"
    - with the context in which the tasks should be completed, indicated as such: "@context"
    - with the task priority optionally listed at the front of the line, in parens, ie, "(A)"

    For example, 4 lines of todo.txt might look like this:

    +garagesale @phone schedule Goodwill pickup
    (A) @phone Tell Mom I love her
    +writing draft Great American Novel
    (B) smell the roses

    The done.txt file is a list of completed todo's from todo.txt.

    See more on todo.txt here:
    http://todotxt.com


OUTPUT:
    Displays a list of:
    - working projects and their percentage complete
    - contexts in which open todo's exist
    - contexts and projects with tasks that have been prioritized
    - projects which are completely done (don't have any open todo's)

CHANGELOG:
    2006.07.29 - Now supports p:, p- and + project notation.  Tx, Pedro!
    2006.05.02 - Released
"""


import math
import os
import sys

__author__ = "Gina Trapani (ginatrapani@gmail.com)"
__copyright__ = "Copyright 2006, Gina Trapani"
__license__ = "GPL"


def usage():
    print("    %s [(open|completed|all)-(projects|contexts) [...]]" % (os.path.basename(sys.argv[0]), ))
    print("      Show a textual report of open and completed tasks")
    print("      for all projects and contexts")
    print("      Works on the unfiltered tasks of TODO_FILE and DONE_FILE.")
    print("")


def printTaskGroups(title, taskDict, priorityList, percentages, taskNum):
    print("")
    print(title)
    if not taskDict:
        print('No items to list.')
        return

    itemMaxLength = len(max(taskDict, key=len))

    # Sort first by number of tasks descending, then by case-insensitive item name.
    items = sorted(list(taskDict.items()), key=lambda x: (-1 * x[1], x[0].casefold()))

    separator('-', (33 if items[0][0] in percentages else 15) + itemMaxLength)

    priorityItems, nonPriorityItems = [], []
    for item in items:
        (priorityItems if item[0] in priorityList else nonPriorityItems).append(item)

    def printItemTaskGroup(item, star):
        printTaskGroup(item, itemMaxLength, percentages.get(item[0], -1), star, taskNum)

    for item in priorityItems:
        printItemTaskGroup(item, "*")
    for item in nonPriorityItems:
        printItemTaskGroup(item, " ")


def printTaskGroup(p, pMaxLen, pctage, star, taskNum):
    taskWidth = int(math.ceil(math.log(taskNum, 10)))
    taskPlural = " " if p[1] == 1 else "s"
    pctageWidget = ''
    if pctage > -1:
        progressBar = "=" * int(pctage // 10)
        pctageWidget = f' {pctage:3d}% [{progressBar:10s}]'

    print(f'{star}{pctageWidget} {p[0]:{pMaxLen}s} ({p[1]:{taskWidth}d} task{taskPlural})')


global sepWidth
sepWidth = 0
def separator(c, width):
    global sepWidth
    sepWidth = max([width, sepWidth])
    sep = ""
    sep = c * sepWidth
    print(sep)


def process(filespec, prefix, tasks, completed, priority):
    try:
        f = open(filespec, "r")
        taskNum = 0
        for line in f:
            prioritized = False
            words = line.split()
            if not words:
                continue
            if words[0] == "X":
                continue    # Ignore trashed tasks.
            taskNum += 1
            if words[0].startswith("("):
                prioritized = True
            if words[0] == ("x"):
                for word in words:
                    if word[0:1] == prefix and len(word) > 1:
                        completed[word] = completed.setdefault(word, 0) + 1
            else:
                for word in words:
                    if word[0:1] == prefix and len(word) > 1:
                        tasks[word] = tasks.setdefault(word, 0)  + 1
                        if prioritized:
                            priority.append(word)
        f.close()
        return taskNum
    except IOError:
        print(f'ERROR: The file named {filespec} could not be read.')
        usage()
        sys.exit(2)


def gather(prefix, tasks, completed, priority):
    taskNum = process(os.environ['TODO_FILE'], prefix, tasks, completed, priority)
    doneNum = process(os.environ['DONE_FILE'], prefix, completed, completed, priority)
    return taskNum, doneNum


def run(prefix, prefixDescription, isPrintOpen, isPrintCompleted):
    tasks = {}
    completed = {}
    priority = []
    taskNum, doneNum = gather(prefix, tasks, completed, priority)

    if isPrintOpen:
        percentages = {}
        for task in tasks:
            openTasks = tasks[task]
            if task in completed:
                closedTasks = completed[task]
            else:
                closedTasks = 0
            totalTasks = openTasks + closedTasks
            percentages[task] = int((closedTasks*100) / totalTasks)

        printTaskGroups(f"{prefixDescription} with open tasks (* = prioritized)", tasks, priority, percentages, taskNum)

    if isPrintCompleted:
        tasksWithNoIncompletes = {}
        for task in completed:
            if task not in tasks:
                tasksWithNoIncompletes[task] = completed[task]

        printTaskGroups(f'completed {prefixDescription} (no open tasks)', tasksWithNoIncompletes, [], {}, taskNum + doneNum)


def main(argv):
    if len(argv) == 0 or argv[0] == 'usage':
        usage()
        return
    if len(argv) == 1:
        argv += ['all-projects', 'open-contexts']

    try:
        for arg in argv[1:]:
            isPrintOpen = False
            isPrintCompleted = False

            which, item = arg.split('-')
            if which == 'open':
                isPrintOpen = True
            elif which == 'completed':
                isPrintCompleted = True
            elif which == 'all':
                isPrintOpen = isPrintCompleted = True
            else:
                raise Exception("Invalid selector: " + which)

            if item == 'projects':
                run('+', item, isPrintOpen, isPrintCompleted)
            elif item == 'contexts':
                run('@', item, isPrintOpen, isPrintCompleted)
            else:
                raise Exception("Invalid item: " + item)
    except Exception as e:
        print(e)
        sys.exit(1)


if __name__ == "__main__":
    main(sys.argv[1:])
