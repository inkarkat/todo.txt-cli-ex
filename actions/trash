#!/bin/bash
###############################################################################
##
# FILE:         trash
# PRODUCT:      todo.txt-cli-ex
# AUTHOR:       Ingo Karkat <ingo@karkat.de>
# DATE CREATED: 27-May-2010
#
###############################################################################
# CONTENTS:
#
# REMARKS:
#
# COPYRIGHT: (C) 2010-2025 Ingo Karkat
#   This program is free software; you can redistribute it and/or modify it
#   under the terms of the GNU General Public License.
#   See http://www.gnu.org/copyleft/gpl.txt
#
# @(#)trash	$Id$	todo.txt-cli-ex
###############################################################################

readonly CACHE_DIRSPEC="${XDG_CACHE_HOME:-${HOME}/.cache}"
[ -d "$CACHE_DIRSPEC" ] || mkdir --parents -- "$CACHE_DIRSPEC" || { printf >&2 'ERROR: Could not initialize cache store at %s\n' "$CACHE_DIRSPEC"; exit 3; }
: ${TODOTXT_DO_LAST:=${CACHE_DIRSPEC}/todo-lastdone}

action=$1
shift

[ "$action" = "usage" ] && {
    echo "    $(basename $0) [--hard] NR [NR ...] [COMMENT]"
    echo "      Marks task(s) on line NR as trashed in todo.txt,"
    echo "      optionally appending COMMENT."
    echo "      With --hard, immediately moves the task(s) into trash.txt."
    echo "      Task(s) that were dependent on NR have that blocker removed."
    echo ""
    exit
}

shopt -s extglob
errmsg="usage: $TODO_SH $(basename $0) [--hard] NR [NR ...] [COMMENT]"

TRASH_FILE=${TRASH_FILE:-$TODO_DIR/trash.txt}

[ $# -eq 0 ] && die "$errmsg"

cleanup()
{
    if [ $TODOTXT_PRESERVE_LINE_NUMBERS = 0 ]; then
        # Finally delete the marked lines.
        sed -i.bak -e '/^!DELETED$/d' "$TODO_FILE" || exit $?
    fi
}
trap 'cleanup' EXIT

isHard=
if [ "$1" = '--hard' ]; then
    isHard='true'
    shift
fi

items=
while [[ "$1" =~ ^[,0-9]+$ ]]
do
    items+=" $1"; shift
done
[ "$items" ] || die "$errmsg"

[ "$RECURSIVE_DO" ] || > "$TODOTXT_DO_LAST"
# Split multiple trash's, if comma separated change to whitespace separated.
# Loop the 'trash' function for each task.
for item in ${items//,/ }
do
    # Always append more even when the task is already trashed.
    if [ $# -gt 0 ]; then
        "$TODO_FULL_SH" command append $item "$@" || exit $?
    fi

    getTodo "$item"

    # Check if this task has already been done or trashed, but allow a --hard
    # re-trash of an already trashed task.
    if [ "${todo:0:2}" = 'x ' ]; then
        die "TODO: $item is already marked done."
    elif [ ! "$isHard" -a "${todo:0:2}" = 'X ' ]; then
        echo "TODO: $item is already marked as trashed."
    else
        now=$(date '+%Y-%m-%d')
        # Remove priority once task is trashed.
        sed -i.bak $item"s/^(.) //" "$TODO_FILE" || exit $?
        # Add "X" trashed marker and timestamp like the 'do' command.
        sed -i.bak $item's|^\(X \([0-9]\{2,4\}-[0-9]\{2\}-[0-9]\{2\} \)\?\)\?|'"X $now |" "$TODO_FILE" || exit $?

        if [ "$isHard" ]; then
            # Immediately move task to trash.
            sed -e "$item!d" "$TODO_FILE" >> "$TRASH_FILE" || exit $?
            if [ $TODOTXT_PRESERVE_LINE_NUMBERS = 0 ]; then
                # Delete line (changes line numbers).
                # Note: Cannot actually remove lines inside the loop, as this may
                # make following task numbers invalid.
                sed -i.bak -e $item"s/^.*/!DELETED/" "$TODO_FILE" || exit $?
            else
                # leave blank line behind (preserves line numbers)
                sed -i.bak -e $item"s/^.*//" "$TODO_FILE" || exit $?
            fi

            # Untrash from trash.txt via 'untrash'.
        else
            # Allow untrashing via 'undo'.
            printf '%s ' $item >> "$TODOTXT_DO_LAST"
        fi
        if [ $TODOTXT_VERBOSE -gt 0 ]; then
            if [ "$isHard" ]; then
                trashItem=$(sed -n '$ =' "$TRASH_FILE") || exit $?
                getNewtodo "$trashItem" "$TRASH_FILE"
                echo "$trashItem $newtodo"
                echo "TODO: $item put into $(getPrefix "$TRASH_FILE") as ${trashItem}."
            else
                getNewtodo "$item"
                echo "$item $newtodo"
                echo "TODO: $item trashed."
            fi
        fi

        if [ -x "$TODO_ACTIONS_DIR/lswait" ]; then
            # Check for tasks that depended on the trashed task.
            depitems=$(TODOTXT_LSWAIT_SHOW_ITEMS=1 "$TODO_FULL_SH" lswait 'for' "$item")
            if [ "$depitems" ]; then
                TODOTXT_VERBOSE=0 "$TODO_FULL_SH" lswait 'for' "$item"
                [[ "$depitems" =~ [\ ,] ]] && depTaskPlural='s' || depTaskPlural=
                echo '--'
                echo "TODO: Task$depTaskPlural ${depitems// /,} depended on $item."
                read -p "      Keep, Trash, or Unwait the dependent task$depTaskPlural (k/t/u) " answer

                if [ "$answer" = 't' ]; then
                    eval 'RECURSIVE_DO=true "$TODO_FULL_SH" trash' ${isHard:+--hard} '$depitems'
                elif [ "$answer" = 'u' ]; then
                    "$TODO_FULL_SH" unwait $depitems 'for' $item
                fi
            fi
        fi
    fi
done

# Extend the auto-archiving to mean "no fluff" and therefore also trigger after
# tasks have been trashed.
if [ $TODOTXT_AUTO_ARCHIVE = 1 ]; then
    "$TODO_FULL_SH" archive
fi
