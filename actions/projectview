#!/bin/bash
###############################################################################
##
# FILE:         projectview
# PRODUCT:      todo.txt-cli-ex
# AUTHOR:       Paul Mansfield
# MAINTAINER:   Ingo Karkat <ingo@karkat.de>
# DATE CREATED: 11-Apr-2010
#
###############################################################################
# CONTENTS:
#
# REMARKS:
#
# SOURCE:
#   https://github.com/the1ts/todo.txt-plugins/tree/master/actions/projectview
#
# COPYRIGHT: (C) 2009-2022 Paul Mansfield
#            (C) 2010-2012 Ingo Karkat
#   This program is free software; you can redistribute it and/or modify it
#   under the terms of the GNU General Public License.
#   See http://www.gnu.org/copyleft/gpl.txt
#
# @(#)projectview	$Id$	todo.txt-cli-ex
###############################################################################

action=$1
shift

if [ "$action" = "usage" ]; then
    echo "    $(basename $0) [-a] [TERM...]"
    echo "    pv [-a] [TERM...]"
    echo "      Show open (all with -a) tasks that contain TERM(s),"
    echo "      grouped by project, and displayed in priority order."
    echo "      If no TERM provided, displays entire todo.txt."
    echo ""
    exit
fi

makeTaskCounts()
{
    if [ "$additional_filter_command" ]; then
        # Just count them; done tasks have already been filtered away.
        "${GNU_PREFIX}"sed -n '$ ='
    else
       "${GNU_PREFIX}"awk  '
function highlight(colorVar,      color) {
    color = ENVIRON[colorVar]
    gsub(/\\+033/, "\033", color)
    return color
}
BEGIN {
    openCnt = 0
    doneCnt = 0
    trashCnt = 0
}
/[0-9]+ x / {
    netTask = substr($0, length(highlight("COLOR_DONE")) + 1)
    if (match(netTask, /^[0-9]+ x /)) {
        doneCnt++
        next
    }
}
/[0-9]+ X / {
    netTask = substr($0, length(highlight("COLOR_TRASH")) + 1)
    if (match(netTask, /^[0-9]+ X /)) {
        trashCnt++
        next
    }
}
{ openCnt++ }
END {
    print openCnt (doneCnt + trashCnt > 0 ? "/" doneCnt : "") (trashCnt > 0 ? "/" trashCnt : "")
}
'
    fi
}

# Configuration to only summarize many unassociated tasks.
: ${TODOTXT_PROJECTVIEW_UNASSOCIATED_THRESHOLD:=10}

original_TODOTXT_VERBOSE=$TODOTXT_VERBOSE
TODOTXT_VERBOSE=0

additional_filter_command="grep -ve '^ *[0-9]\+ [xX] ' | "
if [ "$1" = '-a' ]; then
    shift
    additional_filter_command=
fi

# Show projects in alphabetical order and tasks in priority order.
let projectCnt=0
tasks=

# Find all projects.
readonly projects=$("$TODO_FULL_SH" command listproj "$@")

# For each project show header and the list of tasks.
export HIDE_PROJECTS_SUBSTITUTION='[[:space:]][+][[:graph:]]\{1,\}' # Omitting all projects from the list.
for project in $projects; do
    # Use core _list function, does numbering and coloring for us.
    post_filter_command="${additional_filter_command}grep '$project\\( \\|$\\)'"
    projectList=$(_list "$TODO_FILE" "$@")
    if [ "$projectList" ]; then # Even though we're operating only on project tasks containing TERM, a task filter may still filter away all tasks for a project.
        taskCounts=$(echo "${projectList}" | makeTaskCounts)
        [ $projectCnt -gt 0 ] && echo ""
        echo "--- ${project#+} ($taskCounts) ---"
        echo "${projectList}"

        if [ "$original_TODOTXT_VERBOSE" -gt 0 ]; then
            let projectCnt+=1
            tasks+="${tasks:+$'\n'}$projectList"
        fi
    fi
done

# Show tasks not associated to a project.
unassociatedCnt=0
post_filter_command="${additional_filter_command}grep -ve '[[:space:]]+[[:graph:]]'"
projectList=$(_list "$TODO_FILE" "$@")
if [ "${projectList}" ]; then
    unassociatedCnt=$(echo "$projectList" | "${GNU_PREFIX}"sed -n '$ =')
    unassociatedCounts=$(echo "${projectList}" | makeTaskCounts)
    if [ $unassociatedCnt -le $TODOTXT_PROJECTVIEW_UNASSOCIATED_THRESHOLD ]; then
        [ $projectCnt -gt 0 ] && echo ""
        echo "--- Not in projects ($unassociatedCounts) ---"
        echo "${projectList}"
    fi
fi

if [ "$original_TODOTXT_VERBOSE" -gt 0 ]; then
    let taskCnt=$(echo "$tasks" | sort -u | "${GNU_PREFIX}"sed -n '$ =')

    echo "--"
    if [ $projectCnt -gt 0 ]; then
        echo "TODO: $taskCnt task(s) in $projectCnt projects."
    else
        echo "TODO: No projects found."
    fi

    if [ $unassociatedCnt -gt $TODOTXT_PROJECTVIEW_UNASSOCIATED_THRESHOLD ]; then
        echo "TODO: $unassociatedCounts task(s) not in projects."
    fi
fi
