#!/bin/bash
###############################################################################
##
# FILE:         renderrelativemarkers
# PRODUCT:      todo.txt-cli-ex
# AUTHOR:       Ingo Karkat <ingo@karkat.de>
# DATE CREATED: 04-Oct-2020
#
###############################################################################
# CONTENTS:
#
# REMARKS:
#
# COPYRIGHT: (C) 2020-2022 Ingo Karkat
#   This program is free software; you can redistribute it and/or modify it
#   under the terms of the GNU General Public License.
#   See http://www.gnu.org/copyleft/gpl.txt
#
###############################################################################
set -o noglob

action=$1
shift

[ "$action" = "usage" ] && {
    echo "    $(basename $0)"
    echo "      Convert relative date and task references to allow flexible entry,"
    echo "      especially from apps that don't have all the amenities of todo.sh."
    echo "      Convert dates in markers into the canonical YYYY-MM-DD form, also in easy"
    echo "      human dates like m:today."
    echo "      Convert relative task references in the form .-2 and .+1 to absolute task"
    echo "      numbers."
    echo ""
    exit
}

renderRelativeMarkers()
{
    local isMirrorChangedToStderr="$1"; shift
    local currentTaskNum="${1:?}"; shift
    local task="$1"; shift

    if ! [[ "$task" =~ [^\ ]*[[:graph:]]: ]]; then
        printf '%s\n' "$task"
        [ "$isMirrorChangedToStderr" ] && printf >&2 '\n'
        return 0
    fi

    local originalTask="$task"
    local markers="$(echo "$task" | grep -o '[^ ]*[[:graph:]]:\(([^)]\+)\|[^ ]\+\)' | grep '^[[:graph:]]:')"
    local IFS=$'\n'
    local marker

    for marker in $markers
    do
        local originalMarkerValue="${marker#[[:graph:]]:}"
        local netMarkerValue="${originalMarkerValue#(}"
        local netMarkerValue="${netMarkerValue%)}"
        local canonicalMarkerValue="$netMarkerValue"

        if [[ "$netMarkerValue" =~ ^[0-9]+$ ]]; then
            # 'date' also accepts numbers (and always interprets them as the current
            # day), but numbers should represent ITEM# for task references here.
            continue
        elif [[ "$netMarkerValue" =~ ^\.[+-][0-9]+$ ]]; then
            canonicalMarkerValue=$((${netMarkerValue/./$currentTaskNum}))
        else
            canonicalMarkerValue="$("${GNU_PREFIX}"date -d "$netMarkerValue" +%F 2>/dev/null)" || continue
            # Multiple human dates (e.g. "today", "now", and especially all time
            # specifications) resolve to the current day. Don't canonicalize
            # them unless "today" is used.
            [ "$originalMarkerValue" != 'today' ] && [ "$canonicalMarkerValue" = "$("${GNU_PREFIX}"date +%F)" ] && continue
        fi

        [ "$canonicalMarkerValue" = "$originalMarkerValue" ] || task="${task/${marker}/${marker:0:2}${canonicalMarkerValue}}"
    done

    printf '%s\n' "$task"

    if [ "$isMirrorChangedToStderr" ]; then
        [ "$task" = "$originalTask" ] && printf >&2 '\n' || printf >&2 '%s\n' "$task"
    fi
}

if [ "$action" = --task ]; then
    renderRelativeMarkers '' "$@"
else
    taskCnt=0
    if [ $TODOTXT_VERBOSE -gt 0 ]; then
        TOTAL=$("${GNU_PREFIX}"sed -n '$ =' "$TODO_FILE") || exit $?
        PADDING=${#TOTAL}

        while IFS=$'\n' read -r task
        do
            let taskCnt+=1
            renderRelativeMarkers t "$taskCnt" "$task"
        done < "$TODO_FILE" 2>&1 > "${TODO_FILE}.bak" | TODOTXT_FILTER_FUTURE_TASKS=0 _format '' "$PADDING"
    else
        while IFS=$'\n' read -r task
        do
            let taskCnt+=1
            renderRelativeMarkers '' "$taskCnt" "$task"
        done < "$TODO_FILE" > "${TODO_FILE}.bak"
    fi

    mv "${TODO_FILE}.bak" "${TODO_FILE}"
fi
