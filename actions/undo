#!/bin/bash
###############################################################################
##
# FILE:         undo
# PRODUCT:      todo.txt-cli-ex
# AUTHOR:       Ingo Karkat <ingo@karkat.de>
# DATE CREATED: 29-Jun-2010
#
###############################################################################
# CONTENTS:
#
# REMARKS:
#
# COPYRIGHT: (C) 2010-2024 Ingo Karkat
#   This program is free software; you can redistribute it and/or modify it
#   under the terms of the GNU General Public License.
#   See http://www.gnu.org/copyleft/gpl.txt
#
# @(#)undo	$Id$	todo.txt-cli-ex
###############################################################################

action=$1
shift

[ "$action" = "usage" ] && {
    echo "    $(basename $0)"
    echo "      Un-marks the last done or trashed task(s) in todo.txt so that"
    echo "      they become active again."
    echo "    $(basename $0) ITEM#[, ITEM#, ITEM#, ...]"
    echo "      Un-marks done or trashed task(s) on line ITEM# in todo.txt so that"
    echo "      they become active again."
    echo ""
    exit
}

shopt -s extglob
errmsg="usage: $TODO_SH $(basename $0) [ITEM#[, ITEM#, ITEM#, ...]]"

if [ $# -eq 0 ]; then
    [ -r ~/.todo-lastdone ] || die "TODO: No undo information available!"
    items=$(cat ~/.todo-lastdone)
    rm ~/.todo-lastdone
    [ "$items" ] || die "TODO: No undo information available!"
else
    # Split multiple undo's, if comma separated change to whitespace separated.
    items=${*//,/ }
fi

# Loop the 'undo' function for each task.
for item in $items; do
    getTodo "$item"

    # Check whether this task is actually done or trashed.
    if [ "${todo:0:2}" = 'x ' -o "${todo:0:2}" = 'X ' ]; then
        # Remove "x" done / "X" trashed marker and timestamp.
        sed -i.bak $item's|^[xX] [0-9]\{2,4\}-[0-9]\{2\}-[0-9]\{2\} ||' "$TODO_FILE" || exit $?
        if [ $TODOTXT_VERBOSE -gt 0 ]; then
            getNewtodo "$item"
            echo "$item $newtodo"
            if [ "${todo:0:1}" = 'x' ]; then
                echo "TODO: $item re-activated."
            else
                echo "TODO: $item restored."
            fi
        fi

        "$TODO_FULL_SH" uncomment -q "$item"
    elif [[ "$todo" =~  \ [xz]:[0-9]{4}-[0-9]{2}-[0-9]{2} ]]; then
        # The task may have been scheduled to expire; in this case, remove the
        # expire marker.
        "$TODO_FULL_SH" gsub $item ' [xz]:[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}' ''
    else
        echo "TODO: $item is not marked done or trashed. Has it been archived?"
    fi
done
